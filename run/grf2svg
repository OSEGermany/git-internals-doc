#!/usr/bin/env bash
# SPDX-FileCopyrightText: 2023 Robin Vobruba <hoijui.quaero@gmail.com>
# SPDX-License-Identifier: AGPL-3.0-only
#
# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

script_path="$(readlink -f "${BASH_SOURCE[0]}")"
#script_dir="$(dirname "$script_path")"
script_name="$(basename "$script_path")"

remove_and_commit=false

function print_help() {

	echo -e "$script_name -"
	echo "Converts the *.graffle files in this repo to *.svg ones"
	echo "using graffle2svg."
	echo
	echo "Usage:"
	echo "  $script_name [OPTION...]"
	echo "Options:"
	echo "  -h, --help              Print this usage help and exits."
	echo "  --remove-and-commit     Additionally cleans up and creates a commit in the end."
	echo "Examples:"
	echo "  $script_name --help"
	echo "  $script_name"
}

function exit_if_git_unclean() {
    if [ -z "$(git status --porcelain)" ]
    then
        echo "INFO: Git working directory is clean, continuing ..."
    else
        >&2 echo "ERROR: Git working directory is *NOT* clean, aborting."
        >&2 echo "ERROR: Please check the output of 'git status'."
        exit 1
    fi
}

# read command-line args
POSITIONAL=()
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		--remove-and-commit)
			remove_and_commit=true
			;;
		*) # non-/unknown option
			POSITIONAL+=("$arg") # save it in an array for later
			;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [ "$(find artwork -name "*.graffle" | wc -l)" -eq 0 ]
then
    >&2 echo "WARNING: There are no '*.graffle' left -> Nothing left to do; exiting!"
    exit 2
fi

exit_if_git_unclean

while read -r grfl
do
    base="$(basename --suffix=".graffle" "$grfl")"

    if [ "$base" = "what-git-is" ]
    then
        graffle2svg "$grfl" "artwork/vector/${base}.svg"
    elif [ "$base" = "workflows" ]
    then
        graffle2svg --all-pages "$grfl" "artwork/vector/workflow.svg"
    elif [ "$base" = "main" ]
    then
        graffle2svg --all-pages "$grfl" "artwork/vector/${base}.svg"
    else
        >&2 echo "WARNING: Do not know how ot handle Graffle file '$grfl'; exiting!"
        exit 4
    fi
done < <(find artwork -name "*.graffle")

pushd "artwork/vector" || exit 3

mv "workflow-0.svg" "workflow-star.svg"
mv "workflow-1.svg" "workflow-integration-manager.svg"
mv "workflow-2.svg" "workflow-dictator.svg"

mv "main-0.svg" "add-commit.svg"
mv "main-1.svg" "commit-a.svg"
mv "main-2.svg" "fetch-pull.svg"
mv "main-3.svg" "layout.svg"
mv "main-4.svg" "blobs.svg"
mv "main-5.svg" "trees.svg"
mv "main-6.svg" "commit.svg"
mv "main-7.svg" "blob-expand.svg"
mv "main-8.svg" "tree-expand.svg"
mv "main-9.svg" "commit-expand.svg"
mv "main-10.svg" "commit-expand2.svg"
mv "main-11.svg" "tag-expand.svg"
mv "main-12.svg" "treeish.svg"
mv "main-13.svg" "workflow-integration-manager.svg"
mv "main-14.svg" "rebase1.svg"
mv "main-15.svg" "rebase2.svg"
mv "main-16.svg" "rebase3.svg"
mv "main-17.svg" "rebase4.svg"
mv "main-18.svg" "rebase5.svg"
mv "main-19.svg" "rebase6.svg"
mv "main-20.svg" "rebase7-final.svg"
mv "main-21.svg" "remote-story1.svg"
mv "main-22.svg" "remote-story2.svg"
mv "main-23.svg" "remote-story3.svg"
mv "main-24.svg" "branch-story1.svg"
mv "main-25.svg" "branch-story2.svg"
mv "main-26.svg" "branch-story3.svg"
mv "main-27.svg" "branches1.svg"
mv "main-28.svg" "dag-model.svg"
mv "main-29.svg" "object-dag-tree1.svg"
mv "main-30.svg" "object-dag-tree2.svg"
mv "main-31.svg" "object-dag-tree3.svg"
mv "main-32.svg" "object-dag.svg"
mv "main-33.svg" "dag-1.svg"
mv "main-34.svg" "traversing-git-objects.svg"

popd || exit 4

if $remove_and_commit
then
    git rm artwork/*.graffle
    git add artwork/vector/*.svg
    git commit --message "Extract SVGs from Graffle files\n\nUsing script '$script_path'."
fi
